config:
  target: "http://localhost:3000"
  phases:
    - duration: 60
      arrivalRate: 5
  processor: "./dist/artillery.processor.js"
  variables:
    defaultPassword: "ValidPass123!" # Must meet password policy
  ensure:
    p99: 1500

scenarios:
  - name: "User Registration and Actions"
    flow:
      # User registration
      - function: "generateUser"
      - post:
          url: "/users"  # ACTUAL ENDPOINT
          json:  # Send flat object without 'user' nesting
            first_name: "{{ user.first_name }}"
            last_name: "{{ user.last_name }}"
            email: "{{ user.email }}"
            password: "{{ user.password }}"
            phone_number: "{{ user.phone_number }}"
            profile_picture: "{{ user.profile_picture }}"
            account_type: "{{ user.account_type }}"
            status: "{{ user.status }}"
          capture:
            json: "$.data.user_id"
            as: "userId"
          afterResponse: "extractUserData"

      # User login
      - post:
          url: "/auth/signin"  # ACTUAL ENDPOINT
          json:
            email: "{{ user.email }}"
            password: "{{ defaultPassword }}"
            userType: "user"
          afterResponse: "extractLoginData"

      # Create quote
      - function: "generateQuoteData"
      - post:
          url: "/quotes/{{ userId }}"  # ACTUAL ENDPOINT
          headers:
            Authorization: "Bearer {{ accessToken }}"
          json:  # Send flat object without 'quote' nesting
            quote_details: "{{ quote.quote_details }}"
            estimated_cost: "{{ quote.estimated_cost }}"
            attachments: "{{ quote.attachments }}"

      # Create ticket
      - function: "generateTicketData"
      - post:
          url: "/tickets/{{ userId }}"  # ACTUAL ENDPOINT
          headers:
            Authorization: "Bearer {{ accessToken }}"
          json:  # Send flat object without 'ticket' nesting
            issue: "{{ ticket.issue }}"

      # Validate workflow
      - function: "logResponse"
